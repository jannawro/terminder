// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
    reminder_id,
    body,
    creation_date
) VALUES (
    ?,
    ?,
    CURRENT_TIMESTAMP
)
RETURNING id, reminder_id, body, creation_date, dismissal_date
`

type CreateNotificationParams struct {
	ReminderID sql.NullInt64
	Body       string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.ReminderID, arg.Body)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.ReminderID,
		&i.Body,
		&i.CreationDate,
		&i.DismissalDate,
	)
	return i, err
}

const createReminder = `-- name: CreateReminder :one
INSERT INTO reminders (
    interval,
    body,
    creation_date
) VALUES (
    ?,
    ?,
    CURRENT_TIMESTAMP
)
RETURNING id, interval, creation_date, body, dismissal_date, last_fired
`

type CreateReminderParams struct {
	Interval string
	Body     string
}

func (q *Queries) CreateReminder(ctx context.Context, arg CreateReminderParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, createReminder, arg.Interval, arg.Body)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.Interval,
		&i.CreationDate,
		&i.Body,
		&i.DismissalDate,
		&i.LastFired,
	)
	return i, err
}

const dismissNotification = `-- name: DismissNotification :one
UPDATE notifications
SET dismissal_date = CURRENT_TIMESTAMP
WHERE id = ? AND dismissal_date IS NULL
RETURNING id, reminder_id, body, creation_date, dismissal_date
`

func (q *Queries) DismissNotification(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, dismissNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.ReminderID,
		&i.Body,
		&i.CreationDate,
		&i.DismissalDate,
	)
	return i, err
}

const dismissReminder = `-- name: DismissReminder :one
UPDATE reminders
SET dismissal_date = CURRENT_TIMESTAMP
WHERE id = ? AND dismissal_date IS NULL
RETURNING id, interval, creation_date, body, dismissal_date, last_fired
`

func (q *Queries) DismissReminder(ctx context.Context, id int64) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, dismissReminder, id)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.Interval,
		&i.CreationDate,
		&i.Body,
		&i.DismissalDate,
		&i.LastFired,
	)
	return i, err
}

const getAllActiveNotifications = `-- name: GetAllActiveNotifications :many
SELECT 
    id,
    reminder_id,
    body,
    creation_date,
    dismissal_date
FROM notifications
WHERE dismissal_date IS NULL
ORDER BY creation_date ASC
`

func (q *Queries) GetAllActiveNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.ReminderID,
			&i.Body,
			&i.CreationDate,
			&i.DismissalDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllActiveReminders = `-- name: GetAllActiveReminders :many
SELECT 
    id,
    interval,
    creation_date,
    body,
    dismissal_date,
    last_fired
FROM reminders
WHERE dismissal_date IS NULL
ORDER BY creation_date ASC
`

func (q *Queries) GetAllActiveReminders(ctx context.Context) ([]Reminder, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveReminders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reminder
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.Interval,
			&i.CreationDate,
			&i.Body,
			&i.DismissalDate,
			&i.LastFired,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReminderLastFired = `-- name: UpdateReminderLastFired :one
UPDATE reminders 
SET last_fired = CURRENT_TIMESTAMP
WHERE id = ? AND dismissal_date IS NULL
RETURNING id, interval, creation_date, body, dismissal_date, last_fired
`

func (q *Queries) UpdateReminderLastFired(ctx context.Context, id int64) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, updateReminderLastFired, id)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.Interval,
		&i.CreationDate,
		&i.Body,
		&i.DismissalDate,
		&i.LastFired,
	)
	return i, err
}
